# Generated by Django 4.2.10 on 2024-03-22 11:54

import django.db.models.deletion
import django_extensions.db.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("pollingstations", "0020_alter_pollingstation_internal_council_id_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccessibilityInformation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("is_temporary", models.BooleanField(null=True)),
                ("nearby_parking", models.BooleanField(null=True)),
                ("disabled_parking", models.BooleanField(null=True)),
                ("level_access", models.BooleanField(null=True)),
                ("temporary_ramp", models.BooleanField(null=True)),
                ("hearing_loop", models.BooleanField(null=True)),
                ("public_toilets", models.BooleanField(null=True)),
                ("getting_to_the_station", models.TextField(blank=True, null=True)),
                ("at_the_station", models.TextField(blank=True, null=True)),
                (
                    "polling_station",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accessibility_information",
                        to="pollingstations.pollingstation",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="accessibilityinformation",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("level_access", True), ("temporary_ramp", True)),
                    _negated=True,
                ),
                name="no_ramp_if_access_level",
            ),
        ),
    ]
