
version: 2.1

orbs:
  node: circleci/node@5.2.0
  slack: circleci/slack@4.13.3
  aws-cli: circleci/aws-cli@5.4.0


commands:
  install_uv:
    steps:
      - run: pip install --upgrade uv">=0.5.12,<0.6.0"

# the default pipeline parameters, which will be updated according to
# the results of the path-filtering orb
parameters:
  imports-changed:
    type: boolean
    default: false
  application-changed:
    type: boolean
    default: false
  eoni-changed:
    type: boolean
    default: false


jobs:
  build_and_test:
    docker:
      - image: cimg/python:3.12.4-browsers
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
      - image: cimg/postgres:16.3-postgis
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: polling_stations

    working_directory: ~/repo

    steps:
      - checkout

      - node/install:
          node-version: '18'

      - restore_cache:
          key:  v1-dependencies-{{ checksum "uv.lock" }}-{{ checksum "package-lock.json" }}

      - run:
          name: Install node node_modules
          command: npm ci
          cache-path: ~/repo/node_modules
          override-ci-command: npm ci

      - install_uv

      - run:
          name: install app system dependencies
          command: |
            sudo apt update && sudo apt install -y gdal-bin

      - run:
          name: Install HTML Tidy
          command: wget https://github.com/htacg/tidy-html5/releases/download/5.8.0/tidy-5.8.0-Linux-64bit.deb && sudo dpkg -i tidy-5.8.0-Linux-64bit.deb

      - run:
          name: Install python deps
          command: |
            uv sync --all-packages --all-groups --no-python-downloads
            uv run playwright install

      - run: uv cache prune --ci

      - save_cache:
          paths:
            - ./.venv
            - ./node_modules
            - $HOME/.cache
            - $HOME/.cache/uv
          key: v1-dependencies-{{ checksum "uv.lock" }}-{{ checksum "package-lock.json" }}

      - run:
          name: Print versions
          command: |
            uv run python --version
            uv run python manage.py --version

      - run:
          name: Pre-test checks
          command: |
            uv lock --locked
            uv pip check
            uv run python manage.py check
            uv run python manage.py makemigrations --check
            uv run ruff format . --check
            uv run ruff check .
            git ls-files '*.html' | xargs uv run djhtml --check

      - run:
          name: Pytest
          command: |
            uv run python manage.py collectstatic --no-input
            uv run pytest --cov-report= --cov=polling_stations

      - run:
          name: Submit coverage
          command: |
            uv run coveralls


      # In the event the build has failed, alert the dev team
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: $SLACK_DEFAULT_CHANNEL

  run_new_imports:
    docker:
      - image: cimg/python:3.12.4-browsers
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - install_uv
      - restore_cache:
          key: v1-dependencies-{{ checksum "uv.lock" }}-{{ checksum "package-lock.json" }}
      - aws-cli/setup
      - run:
          name: Check and run new import scripts.
          command: |
            sudo apt update && sudo apt install -y gdal-bin
            export CI_DB_PASSWORD=`aws ssm get-parameter --query Parameter.Value --name 'RDS_DB_PASSWORD' --output text`
            export CI_DB_NAME=`aws ssm get-parameter --query Parameter.Value --name 'RDS_DB_NAME' --output text`
            export CI_DB_HOST=`aws ssm get-parameter --query Parameter.Value --name 'RDS_DB_HOST' --output text`
            export S3_DATA_BUCKET=pollingstations.elections.production
            uv run python manage.py run_new_imports
      # In the event the imports have failed, alert the dev team
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: $SLACK_DEFAULT_CHANNEL

  cdk_synth:
    machine:
      image: ubuntu-2404:2024.05.1
    working_directory: ~/repo
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    environment:
      DC_ENVIRONMENT: "<<parameters.dc-environment>>"

    steps:
    - checkout
    - install_uv
    - restore_cache:
        key: v1-dependencies-{{ checksum "uv.lock" }}-{{ checksum "package-lock.json" }}
    - aws-cli/setup
    - run:
          name: Build wdiv-s3-trigger requirements
          command: ./cdk/scripts/wdiv-s3-trigger-requirements.sh
    - run:
        name: CDK version
        command: |
          uv run npx cdk --version
    - run:
        name: CDK synth
        command: |
          uv run --group cdk npx cdk synth --all
    - persist_to_workspace:
        root: ~/repo/
        paths: [ cdk.out ]
    - slack/notify:
        event: fail
        template: basic_fail_1
        channel: $SLACK_DEFAULT_CHANNEL

  cdk_deploy:
    machine:
      image: ubuntu-2404:2024.05.1
    working_directory: ~/repo
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    environment:
      DC_ENVIRONMENT: "<<parameters.dc-environment>>"
    steps:
    - checkout
    - install_uv
    - restore_cache:
        key: v1-dependencies-{{ checksum "uv.lock" }}-{{ checksum "package-lock.json" }}
    - aws-cli/setup
    - run:
        name: CDK deploy
        command: uv run --group cdk npx cdk deploy --all --require-approval never --concurrency 3
    # In the event the deployment has failed, alert the dev team
    - slack/notify:
        event: fail
        template: basic_fail_1
        channel: $SLACK_DEFAULT_CHANNEL

  code_deploy:
    docker:
      - image: cimg/python:3.12.4-node
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
    working_directory: ~/repo
    parameters:
      min-size:
        type: integer
      max-size:
        type: integer
      desired-capacity:
        type: integer
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    environment:
      DC_ENVIRONMENT: "<<parameters.dc-environment>>"
      MIN_SIZE: "<<parameters.min-size>>"
      MAX_SIZE: "<<parameters.max-size>>"
      DESIRED_CAPACITY: "<<parameters.desired-capacity>>"

    steps:
    - checkout
    - install_uv
    - node/install:
        node-version: '18'
    - restore_cache:
        key: v1-dependencies-{{ checksum "uv.lock" }}-{{ checksum "package-lock.json" }}
    - run:
        name: "Code Deploy: Create deployment group"
        command: uv run python deploy/create_deployment_group.py
    - run:
        name: "Code Deploy: Create deployment"
        command: COMMIT_SHA=$CIRCLE_SHA1 uv run python deploy/create_deployment.py
    - run:
        name: Update auto scaling group
        command: uv run python deploy/update_autoscaling_group.py
        no_output_timeout: 15m # TODO reduce/discuss what is suitable?
    - run:
        name: "Publish a new Sentry Release"
        command: |
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli releases --org democracy-club-gp new $CIRCLE_SHA1 --project wdiv
          sentry-cli releases --org democracy-club-gp set-commits --auto $CIRCLE_SHA1 --ignore-missing
          sentry-cli releases --org democracy-club-gp finalize $CIRCLE_SHA1
    # In the event the deployment has failed, alert the dev team
    - slack/notify:
        event: fail
        template: basic_fail_1
        channel: $SLACK_DEFAULT_CHANNEL

  run_new_imports_post_deploy:
    docker:
      - image: cimg/python:3.12.4-browsers
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1

    working_directory: ~/repo

    steps:
      - checkout
      - install_uv
      - restore_cache:
          key: v1-dependencies-{{ checksum "uv.lock" }}-{{ checksum "package-lock.json" }}
      - aws-cli/setup
      - run:
          name: Check and run new import scripts after a deploy.
          command: |
            sudo apt update && sudo apt install -y gdal-bin
            export CI_DB_PASSWORD=`aws ssm get-parameter --query Parameter.Value --name 'RDS_DB_PASSWORD' --output text`
            export CI_DB_NAME=`aws ssm get-parameter --query Parameter.Value --name 'RDS_DB_NAME' --output text`
            export CI_DB_HOST=`aws ssm get-parameter --query Parameter.Value --name 'RDS_DB_HOST' --output text`
            export S3_DATA_BUCKET=pollingstations.elections.production
            uv run python manage.py run_new_imports --post-deploy

      # In the event the deployment has failed, alert the dev team
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: $SLACK_DEFAULT_CHANNEL


workflows:
  test_and_run_importers:
    # NB the script called by run_new_imports will bail early if there are also application changes present
    when: << pipeline.parameters.imports-changed >>
    jobs:
    - build_and_test:
        context: [slack-secrets]
    ###############
    # DEVELOPMENT #
    ###############
    - run_new_imports:
        name: "Development: Run New Imports"
        requires: [build_and_test]
        context: [deployment-development-wdiv, slack-secrets, fcs-api]
        filters: { branches: { only: [ development ] } }
    ###########
    # STAGING #
    ###########
    - run_new_imports:
        name: "Staging: Run New Imports"
        requires: [build_and_test]
        context: [deployment-staging-wdiv, slack-secrets, fcs-api]
        filters: { branches: { only: [ main, master ] } }
    ##############
    # PRODUCTION #
    ##############
    - run_new_imports:
        name: "Production: Run New Imports"
        requires: [build_and_test, "Staging: Run New Imports"]
        context: [deployment-production-wdiv, slack-secrets, fcs-api]
        filters: { branches: { only: [ main, master ] } }


  test_build_deploy_and_run_importers:
    when:
      or: [ << pipeline.parameters.application-changed >>, << pipeline.parameters.eoni-changed >> ]
    jobs:
    - build_and_test:
        context: [slack-secrets]
    ###############
    # DEVELOPMENT #
    ###############
    - cdk_synth:
        name: "CDK Synth"
        requires:
        - build_and_test
        context: [deployment-development-wdiv, slack-secrets]
        dc-environment: development
    - cdk_deploy:
        name: "Development: CDK Deploy"
        requires:
        - "CDK Synth"
        context: [deployment-development-wdiv, slack-secrets]
        filters: { branches: { only: [ development ] } }
        dc-environment: development
    - code_deploy:
        name: "Development: AWS CodeDeploy"
        requires:
        - "Development: CDK Deploy"
        context: [deployment-development-wdiv, slack-secrets]
        filters: { branches: { only: [ development ] } }
        dc-environment: development
        min-size: 1
        max-size: 2
        desired-capacity: 1
    - run_new_imports_post_deploy:
        # NB if no imports have changed this is a no-op
        name: "Development: Run New Imports Post Deploy"
        requires: ["Development: AWS CodeDeploy"]
        context: [deployment-development-wdiv, slack-secrets, fcs-api]
        filters: { branches: { only: [ development ] } }

    ###########
    # STAGING #
    ###########
    - cdk_deploy:
        name: "Staging: CDK Deploy"
        requires:
        - "CDK Synth"
        context: [deployment-staging-wdiv, slack-secrets]
        filters: { branches: { only: [ main, master ] } }
        dc-environment: staging
    - code_deploy:
        name: "Staging: AWS CodeDeploy"
        requires:
        - "Staging: CDK Deploy"
        context: [deployment-staging-wdiv, slack-secrets]
        filters: { branches: { only: [ main, master ] } }
        dc-environment: staging
        min-size: 1
        max-size: 2
        desired-capacity: 1
    - run_new_imports_post_deploy:
        # NB if no imports have changed this is a no-op
        name: "Staging: Run New Imports Post Deploy"
        requires: ["Staging: AWS CodeDeploy"]
        context: [deployment-staging-wdiv, slack-secrets, fcs-api]
        filters: { branches: { only: [ main, master ] } }

    ##############
    # PRODUCTION #
    ##############
    - prod-deploy-hold:
        type: approval
        requires:
        - "Staging: AWS CodeDeploy"
    - cdk_deploy:
        name: "Production: CDK Deploy"
        requires:
        - "CDK Synth"
        - "Staging: AWS CodeDeploy"
        - "prod-deploy-hold"
        context: [deployment-production-wdiv, slack-secrets]
        filters: { branches: { only: [ main, master ] } }
        dc-environment: production
    - code_deploy:
        name: "Production: AWS CodeDeploy"
        requires:
        - "Production: CDK Deploy"
        context: [deployment-production-wdiv, slack-secrets]
        filters: { branches: { only: [ main, master ] } }
        dc-environment: production
        min-size: 1
        max-size: 30
        desired-capacity: 1
    - run_new_imports_post_deploy:
        # NB if no imports have changed this is a no-op
        name: "Production: Run New Imports Post Deploy"
        requires: ["Production: AWS CodeDeploy"]
        context: [deployment-production-wdiv, slack-secrets, fcs-api]
        filters: { branches: { only: [ main, master ] } }
