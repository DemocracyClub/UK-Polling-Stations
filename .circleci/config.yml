version: 2.1

# this allows you to use CircleCI's dynamic configuration feature
setup: true

# the path-filtering orb is required to continue a pipeline based on
# the path of an updated fileset
orbs:
  path-filtering: circleci/path-filtering@0.1.3

workflows:
  # the set-paths-changed workflow is always triggered, regardless of the pipeline parameters.
  set-paths-changed:
    jobs:
      # the path-filtering/filter job determines which pipeline
      # parameters to update.
      - path-filtering/filter:
          name: check-updated-files
          # 3-column, whitespace-delimited mapping. One mapping per line:
          # <regex path-to-test> <parameter-to-set> <value-of-pipeline-parameter>
          # <path-to-test> is evaluated ~ `if re.compile(r'^' + <path-to-test> + r'$').match(changed_path)
          # So we can use a look ahead, as it's python's re library doing the work.
          # The regex should match whatever is in run_new_imports.py.
          # It can probably be robustified by sticking all the council imports in their own subdir.
          mapping: |
            polling_stations\/apps\/data_importers\/management\/commands\/misc_fixes\.py imports-changed true
            polling_stations\/apps\/data_importers\/management\/commands\/import_(?!eoni).+\.py imports-changed true
            (?!polling_stations\/apps\/data_importers\/management\/commands\/import_.+\.py).* application-changed true
            polling_stations\/apps\/data_importers\/management\/commands\/import_eoni.py eoni-changed true
          base-revision: master
          tag: 3.10.8
          # this is the path of the configuration we should trigger once
          # path filtering and pipeline parameter value updates are
          # complete. In this case, we are using the parent dynamic
          # configuration itself.
          config-path: .circleci/deploy-config.yml
